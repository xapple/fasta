window.pdocSearch = (function(){
/** elasticlunr - http://weixsong.github.io * Copyright (C) 2017 Oliver Nightingale * Copyright (C) 2017 Wei Song * MIT Licensed */!function(){function e(e){if(null===e||"object"!=typeof e)return e;var t=e.constructor();for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n]);return t}var t=function(e){var n=new t.Index;return n.pipeline.add(t.trimmer,t.stopWordFilter,t.stemmer),e&&e.call(n,n),n};t.version="0.9.5",lunr=t,t.utils={},t.utils.warn=function(e){return function(t){e.console&&console.warn&&console.warn(t)}}(this),t.utils.toString=function(e){return void 0===e||null===e?"":e.toString()},t.EventEmitter=function(){this.events={}},t.EventEmitter.prototype.addListener=function(){var e=Array.prototype.slice.call(arguments),t=e.pop(),n=e;if("function"!=typeof t)throw new TypeError("last argument must be a function");n.forEach(function(e){this.hasHandler(e)||(this.events[e]=[]),this.events[e].push(t)},this)},t.EventEmitter.prototype.removeListener=function(e,t){if(this.hasHandler(e)){var n=this.events[e].indexOf(t);-1!==n&&(this.events[e].splice(n,1),0==this.events[e].length&&delete this.events[e])}},t.EventEmitter.prototype.emit=function(e){if(this.hasHandler(e)){var t=Array.prototype.slice.call(arguments,1);this.events[e].forEach(function(e){e.apply(void 0,t)},this)}},t.EventEmitter.prototype.hasHandler=function(e){return e in this.events},t.tokenizer=function(e){if(!arguments.length||null===e||void 0===e)return[];if(Array.isArray(e)){var n=e.filter(function(e){return null===e||void 0===e?!1:!0});n=n.map(function(e){return t.utils.toString(e).toLowerCase()});var i=[];return n.forEach(function(e){var n=e.split(t.tokenizer.seperator);i=i.concat(n)},this),i}return e.toString().trim().toLowerCase().split(t.tokenizer.seperator)},t.tokenizer.defaultSeperator=/[\s\-]+/,t.tokenizer.seperator=t.tokenizer.defaultSeperator,t.tokenizer.setSeperator=function(e){null!==e&&void 0!==e&&"object"==typeof e&&(t.tokenizer.seperator=e)},t.tokenizer.resetSeperator=function(){t.tokenizer.seperator=t.tokenizer.defaultSeperator},t.tokenizer.getSeperator=function(){return t.tokenizer.seperator},t.Pipeline=function(){this._queue=[]},t.Pipeline.registeredFunctions={},t.Pipeline.registerFunction=function(e,n){n in t.Pipeline.registeredFunctions&&t.utils.warn("Overwriting existing registered function: "+n),e.label=n,t.Pipeline.registeredFunctions[n]=e},t.Pipeline.getRegisteredFunction=function(e){return e in t.Pipeline.registeredFunctions!=!0?null:t.Pipeline.registeredFunctions[e]},t.Pipeline.warnIfFunctionNotRegistered=function(e){var n=e.label&&e.label in this.registeredFunctions;n||t.utils.warn("Function is not registered with pipeline. This may cause problems when serialising the index.\n",e)},t.Pipeline.load=function(e){var n=new t.Pipeline;return e.forEach(function(e){var i=t.Pipeline.getRegisteredFunction(e);if(!i)throw new Error("Cannot load un-registered function: "+e);n.add(i)}),n},t.Pipeline.prototype.add=function(){var e=Array.prototype.slice.call(arguments);e.forEach(function(e){t.Pipeline.warnIfFunctionNotRegistered(e),this._queue.push(e)},this)},t.Pipeline.prototype.after=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i+1,0,n)},t.Pipeline.prototype.before=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i,0,n)},t.Pipeline.prototype.remove=function(e){var t=this._queue.indexOf(e);-1!==t&&this._queue.splice(t,1)},t.Pipeline.prototype.run=function(e){for(var t=[],n=e.length,i=this._queue.length,o=0;n>o;o++){for(var r=e[o],s=0;i>s&&(r=this._queue[s](r,o,e),void 0!==r&&null!==r);s++);void 0!==r&&null!==r&&t.push(r)}return t},t.Pipeline.prototype.reset=function(){this._queue=[]},t.Pipeline.prototype.get=function(){return this._queue},t.Pipeline.prototype.toJSON=function(){return this._queue.map(function(e){return t.Pipeline.warnIfFunctionNotRegistered(e),e.label})},t.Index=function(){this._fields=[],this._ref="id",this.pipeline=new t.Pipeline,this.documentStore=new t.DocumentStore,this.index={},this.eventEmitter=new t.EventEmitter,this._idfCache={},this.on("add","remove","update",function(){this._idfCache={}}.bind(this))},t.Index.prototype.on=function(){var e=Array.prototype.slice.call(arguments);return this.eventEmitter.addListener.apply(this.eventEmitter,e)},t.Index.prototype.off=function(e,t){return this.eventEmitter.removeListener(e,t)},t.Index.load=function(e){e.version!==t.version&&t.utils.warn("version mismatch: current "+t.version+" importing "+e.version);var n=new this;n._fields=e.fields,n._ref=e.ref,n.documentStore=t.DocumentStore.load(e.documentStore),n.pipeline=t.Pipeline.load(e.pipeline),n.index={};for(var i in e.index)n.index[i]=t.InvertedIndex.load(e.index[i]);return n},t.Index.prototype.addField=function(e){return this._fields.push(e),this.index[e]=new t.InvertedIndex,this},t.Index.prototype.setRef=function(e){return this._ref=e,this},t.Index.prototype.saveDocument=function(e){return this.documentStore=new t.DocumentStore(e),this},t.Index.prototype.addDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.addDoc(i,e),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));this.documentStore.addFieldLength(i,n,o.length);var r={};o.forEach(function(e){e in r?r[e]+=1:r[e]=1},this);for(var s in r){var u=r[s];u=Math.sqrt(u),this.index[n].addToken(s,{ref:i,tf:u})}},this),n&&this.eventEmitter.emit("add",e,this)}},t.Index.prototype.removeDocByRef=function(e){if(e&&this.documentStore.isDocStored()!==!1&&this.documentStore.hasDoc(e)){var t=this.documentStore.getDoc(e);this.removeDoc(t,!1)}},t.Index.prototype.removeDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.hasDoc(i)&&(this.documentStore.removeDoc(i),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));o.forEach(function(e){this.index[n].removeToken(e,i)},this)},this),n&&this.eventEmitter.emit("remove",e,this))}},t.Index.prototype.updateDoc=function(e,t){var t=void 0===t?!0:t;this.removeDocByRef(e[this._ref],!1),this.addDoc(e,!1),t&&this.eventEmitter.emit("update",e,this)},t.Index.prototype.idf=function(e,t){var n="@"+t+"/"+e;if(Object.prototype.hasOwnProperty.call(this._idfCache,n))return this._idfCache[n];var i=this.index[t].getDocFreq(e),o=1+Math.log(this.documentStore.length/(i+1));return this._idfCache[n]=o,o},t.Index.prototype.getFields=function(){return this._fields.slice()},t.Index.prototype.search=function(e,n){if(!e)return[];e="string"==typeof e?{any:e}:JSON.parse(JSON.stringify(e));var i=null;null!=n&&(i=JSON.stringify(n));for(var o=new t.Configuration(i,this.getFields()).get(),r={},s=Object.keys(e),u=0;u<s.length;u++){var a=s[u];r[a]=this.pipeline.run(t.tokenizer(e[a]))}var l={};for(var c in o){var d=r[c]||r.any;if(d){var f=this.fieldSearch(d,c,o),h=o[c].boost;for(var p in f)f[p]=f[p]*h;for(var p in f)p in l?l[p]+=f[p]:l[p]=f[p]}}var v,g=[];for(var p in l)v={ref:p,score:l[p]},this.documentStore.hasDoc(p)&&(v.doc=this.documentStore.getDoc(p)),g.push(v);return g.sort(function(e,t){return t.score-e.score}),g},t.Index.prototype.fieldSearch=function(e,t,n){var i=n[t].bool,o=n[t].expand,r=n[t].boost,s=null,u={};return 0!==r?(e.forEach(function(e){var n=[e];1==o&&(n=this.index[t].expandToken(e));var r={};n.forEach(function(n){var o=this.index[t].getDocs(n),a=this.idf(n,t);if(s&&"AND"==i){var l={};for(var c in s)c in o&&(l[c]=o[c]);o=l}n==e&&this.fieldSearchStats(u,n,o);for(var c in o){var d=this.index[t].getTermFrequency(n,c),f=this.documentStore.getFieldLength(c,t),h=1;0!=f&&(h=1/Math.sqrt(f));var p=1;n!=e&&(p=.15*(1-(n.length-e.length)/n.length));var v=d*a*h*p;c in r?r[c]+=v:r[c]=v}},this),s=this.mergeScores(s,r,i)},this),s=this.coordNorm(s,u,e.length)):void 0},t.Index.prototype.mergeScores=function(e,t,n){if(!e)return t;if("AND"==n){var i={};for(var o in t)o in e&&(i[o]=e[o]+t[o]);return i}for(var o in t)o in e?e[o]+=t[o]:e[o]=t[o];return e},t.Index.prototype.fieldSearchStats=function(e,t,n){for(var i in n)i in e?e[i].push(t):e[i]=[t]},t.Index.prototype.coordNorm=function(e,t,n){for(var i in e)if(i in t){var o=t[i].length;e[i]=e[i]*o/n}return e},t.Index.prototype.toJSON=function(){var e={};return this._fields.forEach(function(t){e[t]=this.index[t].toJSON()},this),{version:t.version,fields:this._fields,ref:this._ref,documentStore:this.documentStore.toJSON(),index:e,pipeline:this.pipeline.toJSON()}},t.Index.prototype.use=function(e){var t=Array.prototype.slice.call(arguments,1);t.unshift(this),e.apply(this,t)},t.DocumentStore=function(e){this._save=null===e||void 0===e?!0:e,this.docs={},this.docInfo={},this.length=0},t.DocumentStore.load=function(e){var t=new this;return t.length=e.length,t.docs=e.docs,t.docInfo=e.docInfo,t._save=e.save,t},t.DocumentStore.prototype.isDocStored=function(){return this._save},t.DocumentStore.prototype.addDoc=function(t,n){this.hasDoc(t)||this.length++,this.docs[t]=this._save===!0?e(n):null},t.DocumentStore.prototype.getDoc=function(e){return this.hasDoc(e)===!1?null:this.docs[e]},t.DocumentStore.prototype.hasDoc=function(e){return e in this.docs},t.DocumentStore.prototype.removeDoc=function(e){this.hasDoc(e)&&(delete this.docs[e],delete this.docInfo[e],this.length--)},t.DocumentStore.prototype.addFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&(this.docInfo[e]||(this.docInfo[e]={}),this.docInfo[e][t]=n)},t.DocumentStore.prototype.updateFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&this.addFieldLength(e,t,n)},t.DocumentStore.prototype.getFieldLength=function(e,t){return null===e||void 0===e?0:e in this.docs&&t in this.docInfo[e]?this.docInfo[e][t]:0},t.DocumentStore.prototype.toJSON=function(){return{docs:this.docs,docInfo:this.docInfo,length:this.length,save:this._save}},t.stemmer=function(){var e={ational:"ate",tional:"tion",enci:"ence",anci:"ance",izer:"ize",bli:"ble",alli:"al",entli:"ent",eli:"e",ousli:"ous",ization:"ize",ation:"ate",ator:"ate",alism:"al",iveness:"ive",fulness:"ful",ousness:"ous",aliti:"al",iviti:"ive",biliti:"ble",logi:"log"},t={icate:"ic",ative:"",alize:"al",iciti:"ic",ical:"ic",ful:"",ness:""},n="[^aeiou]",i="[aeiouy]",o=n+"[^aeiouy]*",r=i+"[aeiou]*",s="^("+o+")?"+r+o,u="^("+o+")?"+r+o+"("+r+")?$",a="^("+o+")?"+r+o+r+o,l="^("+o+")?"+i,c=new RegExp(s),d=new RegExp(a),f=new RegExp(u),h=new RegExp(l),p=/^(.+?)(ss|i)es$/,v=/^(.+?)([^s])s$/,g=/^(.+?)eed$/,m=/^(.+?)(ed|ing)$/,y=/.$/,S=/(at|bl|iz)$/,x=new RegExp("([^aeiouylsz])\\1$"),w=new RegExp("^"+o+i+"[^aeiouwxy]$"),I=/^(.+?[^aeiou])y$/,b=/^(.+?)(ational|tional|enci|anci|izer|bli|alli|entli|eli|ousli|ization|ation|ator|alism|iveness|fulness|ousness|aliti|iviti|biliti|logi)$/,E=/^(.+?)(icate|ative|alize|iciti|ical|ful|ness)$/,D=/^(.+?)(al|ance|ence|er|ic|able|ible|ant|ement|ment|ent|ou|ism|ate|iti|ous|ive|ize)$/,F=/^(.+?)(s|t)(ion)$/,_=/^(.+?)e$/,P=/ll$/,k=new RegExp("^"+o+i+"[^aeiouwxy]$"),z=function(n){var i,o,r,s,u,a,l;if(n.length<3)return n;if(r=n.substr(0,1),"y"==r&&(n=r.toUpperCase()+n.substr(1)),s=p,u=v,s.test(n)?n=n.replace(s,"$1$2"):u.test(n)&&(n=n.replace(u,"$1$2")),s=g,u=m,s.test(n)){var z=s.exec(n);s=c,s.test(z[1])&&(s=y,n=n.replace(s,""))}else if(u.test(n)){var z=u.exec(n);i=z[1],u=h,u.test(i)&&(n=i,u=S,a=x,l=w,u.test(n)?n+="e":a.test(n)?(s=y,n=n.replace(s,"")):l.test(n)&&(n+="e"))}if(s=I,s.test(n)){var z=s.exec(n);i=z[1],n=i+"i"}if(s=b,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+e[o])}if(s=E,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+t[o])}if(s=D,u=F,s.test(n)){var z=s.exec(n);i=z[1],s=d,s.test(i)&&(n=i)}else if(u.test(n)){var z=u.exec(n);i=z[1]+z[2],u=d,u.test(i)&&(n=i)}if(s=_,s.test(n)){var z=s.exec(n);i=z[1],s=d,u=f,a=k,(s.test(i)||u.test(i)&&!a.test(i))&&(n=i)}return s=P,u=d,s.test(n)&&u.test(n)&&(s=y,n=n.replace(s,"")),"y"==r&&(n=r.toLowerCase()+n.substr(1)),n};return z}(),t.Pipeline.registerFunction(t.stemmer,"stemmer"),t.stopWordFilter=function(e){return e&&t.stopWordFilter.stopWords[e]!==!0?e:void 0},t.clearStopWords=function(){t.stopWordFilter.stopWords={}},t.addStopWords=function(e){null!=e&&Array.isArray(e)!==!1&&e.forEach(function(e){t.stopWordFilter.stopWords[e]=!0},this)},t.resetStopWords=function(){t.stopWordFilter.stopWords=t.defaultStopWords},t.defaultStopWords={"":!0,a:!0,able:!0,about:!0,across:!0,after:!0,all:!0,almost:!0,also:!0,am:!0,among:!0,an:!0,and:!0,any:!0,are:!0,as:!0,at:!0,be:!0,because:!0,been:!0,but:!0,by:!0,can:!0,cannot:!0,could:!0,dear:!0,did:!0,"do":!0,does:!0,either:!0,"else":!0,ever:!0,every:!0,"for":!0,from:!0,get:!0,got:!0,had:!0,has:!0,have:!0,he:!0,her:!0,hers:!0,him:!0,his:!0,how:!0,however:!0,i:!0,"if":!0,"in":!0,into:!0,is:!0,it:!0,its:!0,just:!0,least:!0,let:!0,like:!0,likely:!0,may:!0,me:!0,might:!0,most:!0,must:!0,my:!0,neither:!0,no:!0,nor:!0,not:!0,of:!0,off:!0,often:!0,on:!0,only:!0,or:!0,other:!0,our:!0,own:!0,rather:!0,said:!0,say:!0,says:!0,she:!0,should:!0,since:!0,so:!0,some:!0,than:!0,that:!0,the:!0,their:!0,them:!0,then:!0,there:!0,these:!0,they:!0,"this":!0,tis:!0,to:!0,too:!0,twas:!0,us:!0,wants:!0,was:!0,we:!0,were:!0,what:!0,when:!0,where:!0,which:!0,"while":!0,who:!0,whom:!0,why:!0,will:!0,"with":!0,would:!0,yet:!0,you:!0,your:!0},t.stopWordFilter.stopWords=t.defaultStopWords,t.Pipeline.registerFunction(t.stopWordFilter,"stopWordFilter"),t.trimmer=function(e){if(null===e||void 0===e)throw new Error("token should not be undefined");return e.replace(/^\W+/,"").replace(/\W+$/,"")},t.Pipeline.registerFunction(t.trimmer,"trimmer"),t.InvertedIndex=function(){this.root={docs:{},df:0}},t.InvertedIndex.load=function(e){var t=new this;return t.root=e.root,t},t.InvertedIndex.prototype.addToken=function(e,t,n){for(var n=n||this.root,i=0;i<=e.length-1;){var o=e[i];o in n||(n[o]={docs:{},df:0}),i+=1,n=n[o]}var r=t.ref;n.docs[r]?n.docs[r]={tf:t.tf}:(n.docs[r]={tf:t.tf},n.df+=1)},t.InvertedIndex.prototype.hasToken=function(e){if(!e)return!1;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return!1;t=t[e[n]]}return!0},t.InvertedIndex.prototype.getNode=function(e){if(!e)return null;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return null;t=t[e[n]]}return t},t.InvertedIndex.prototype.getDocs=function(e){var t=this.getNode(e);return null==t?{}:t.docs},t.InvertedIndex.prototype.getTermFrequency=function(e,t){var n=this.getNode(e);return null==n?0:t in n.docs?n.docs[t].tf:0},t.InvertedIndex.prototype.getDocFreq=function(e){var t=this.getNode(e);return null==t?0:t.df},t.InvertedIndex.prototype.removeToken=function(e,t){if(e){var n=this.getNode(e);null!=n&&t in n.docs&&(delete n.docs[t],n.df-=1)}},t.InvertedIndex.prototype.expandToken=function(e,t,n){if(null==e||""==e)return[];var t=t||[];if(void 0==n&&(n=this.getNode(e),null==n))return t;n.df>0&&t.push(e);for(var i in n)"docs"!==i&&"df"!==i&&this.expandToken(e+i,t,n[i]);return t},t.InvertedIndex.prototype.toJSON=function(){return{root:this.root}},t.Configuration=function(e,n){var e=e||"";if(void 0==n||null==n)throw new Error("fields should not be null");this.config={};var i;try{i=JSON.parse(e),this.buildUserConfig(i,n)}catch(o){t.utils.warn("user configuration parse failed, will use default configuration"),this.buildDefaultConfig(n)}},t.Configuration.prototype.buildDefaultConfig=function(e){this.reset(),e.forEach(function(e){this.config[e]={boost:1,bool:"OR",expand:!1}},this)},t.Configuration.prototype.buildUserConfig=function(e,n){var i="OR",o=!1;if(this.reset(),"bool"in e&&(i=e.bool||i),"expand"in e&&(o=e.expand||o),"fields"in e)for(var r in e.fields)if(n.indexOf(r)>-1){var s=e.fields[r],u=o;void 0!=s.expand&&(u=s.expand),this.config[r]={boost:s.boost||0===s.boost?s.boost:1,bool:s.bool||i,expand:u}}else t.utils.warn("field name in user configuration not found in index instance fields");else this.addAllFields2UserConfig(i,o,n)},t.Configuration.prototype.addAllFields2UserConfig=function(e,t,n){n.forEach(function(n){this.config[n]={boost:1,bool:e,expand:t}},this)},t.Configuration.prototype.get=function(){return this.config},t.Configuration.prototype.reset=function(){this.config={}},lunr.SortedSet=function(){this.length=0,this.elements=[]},lunr.SortedSet.load=function(e){var t=new this;return t.elements=e,t.length=e.length,t},lunr.SortedSet.prototype.add=function(){var e,t;for(e=0;e<arguments.length;e++)t=arguments[e],~this.indexOf(t)||this.elements.splice(this.locationFor(t),0,t);this.length=this.elements.length},lunr.SortedSet.prototype.toArray=function(){return this.elements.slice()},lunr.SortedSet.prototype.map=function(e,t){return this.elements.map(e,t)},lunr.SortedSet.prototype.forEach=function(e,t){return this.elements.forEach(e,t)},lunr.SortedSet.prototype.indexOf=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;){if(r===e)return o;e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o]}return r===e?o:-1},lunr.SortedSet.prototype.locationFor=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;)e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o];return r>e?o:e>r?o+1:void 0},lunr.SortedSet.prototype.intersect=function(e){for(var t=new lunr.SortedSet,n=0,i=0,o=this.length,r=e.length,s=this.elements,u=e.elements;;){if(n>o-1||i>r-1)break;s[n]!==u[i]?s[n]<u[i]?n++:s[n]>u[i]&&i++:(t.add(s[n]),n++,i++)}return t},lunr.SortedSet.prototype.clone=function(){var e=new lunr.SortedSet;return e.elements=this.toArray(),e.length=e.elements.length,e},lunr.SortedSet.prototype.union=function(e){var t,n,i;this.length>=e.length?(t=this,n=e):(t=e,n=this),i=t.clone();for(var o=0,r=n.toArray();o<r.length;o++)i.add(r[o]);return i},lunr.SortedSet.prototype.toJSON=function(){return this.toArray()},function(e,t){"function"==typeof define&&define.amd?define(t):"object"==typeof exports?module.exports=t():e.elasticlunr=t()}(this,function(){return t})}();
    /** pdoc search index */const docs = [{"fullname": "fasta", "modulename": "fasta", "kind": "module", "doc": "<p>Written by Lucas Sinclair.\nMIT Licensed.\nContact at <a href=\"www.sinclair.bio\">www.sinclair.bio</a></p>\n"}, {"fullname": "fasta.url", "modulename": "fasta", "qualname": "url", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;http://xapple.github.io/fasta/&#x27;"}, {"fullname": "fasta.repo_url", "modulename": "fasta", "qualname": "repo_url", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;http://github.com/xapple/fasta/&#x27;"}, {"fullname": "fasta.module_dir", "modulename": "fasta", "qualname": "module_dir", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;/Users/sinclair/repos/fasta/fasta&#x27;"}, {"fullname": "fasta.aligned", "modulename": "fasta.aligned", "kind": "module", "doc": "<p>Written by Lucas Sinclair.\nMIT Licensed.\nContact at <a href=\"www.sinclair.bio\">www.sinclair.bio</a></p>\n"}, {"fullname": "fasta.aligned.AlignedFASTA", "modulename": "fasta.aligned", "qualname": "AlignedFASTA", "kind": "class", "doc": "<p>Also a FASTA file technically, but contains an alignment.</p>\n", "bases": "fasta.core.FASTA"}, {"fullname": "fasta.aligned.AlignedFASTA.ext", "modulename": "fasta.aligned", "qualname": "AlignedFASTA.ext", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;aln&#x27;"}, {"fullname": "fasta.aligned.AlignedFASTA.parse", "modulename": "fasta.aligned", "qualname": "AlignedFASTA.parse", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "fasta.aligned.AlignedFASTA.add_seq", "modulename": "fasta.aligned", "qualname": "AlignedFASTA.add_seq", "kind": "function", "doc": "<p>Use this method to add a SeqRecord object to this fasta.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">seq</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "fasta.aligned.AlignedFASTA.flush", "modulename": "fasta.aligned", "qualname": "AlignedFASTA.flush", "kind": "function", "doc": "<p>Empty the buffer.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "fasta.aligned.AlignedFASTA.write", "modulename": "fasta.aligned", "qualname": "AlignedFASTA.write", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">reads</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "fasta.aligned.AlignedFASTA.sequences", "modulename": "fasta.aligned", "qualname": "AlignedFASTA.sequences", "kind": "variable", "doc": "<p>Another way of easily retrieving sequences. Also highly ineffective.\nConsider using the SQLite API instead.</p>\n"}, {"fullname": "fasta.aligned.AlignedFASTA.gblocks", "modulename": "fasta.aligned", "qualname": "AlignedFASTA.gblocks", "kind": "function", "doc": "<p>Apply the gblocks filtering algorithm to the alignment.\nSee this page:\n<a href=\"http://molevol.cmima.csic.es/castresana/Gblocks/Gblocks_documentation.html\">http://molevol.cmima.csic.es/castresana/Gblocks/Gblocks_documentation.html</a>\nNeed to rename all sequences, because it will complain with long names.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">new_path</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">seq_type</span><span class=\"o\">=</span><span class=\"s1\">&#39;nucl&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "fasta.aligned.AlignedFASTA.build_tree", "modulename": "fasta.aligned", "qualname": "AlignedFASTA.build_tree", "kind": "function", "doc": "<p>Dispatch a tree build call. Note that you need at least four\ntaxa to express some evolutionary history on an unrooted tree.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "fasta.aligned.AlignedFASTA.build_tree_raxml", "modulename": "fasta.aligned", "qualname": "AlignedFASTA.build_tree_raxml", "kind": "function", "doc": "<p>Make a tree with RAxML.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">new_path</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">seq_type</span><span class=\"o\">=</span><span class=\"s1\">&#39;nucl&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">num_threads</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">free_cores</span><span class=\"o\">=</span><span class=\"mi\">2</span>,</span><span class=\"param\">\t<span class=\"n\">keep_dir</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "fasta.aligned.AlignedFASTA.build_tree_fast", "modulename": "fasta.aligned", "qualname": "AlignedFASTA.build_tree_fast", "kind": "function", "doc": "<p>Make a tree with FastTree. Names will be truncated however.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">new_path</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">seq_type</span><span class=\"o\">=</span><span class=\"s1\">&#39;nucl&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "fasta.common", "modulename": "fasta.common", "kind": "module", "doc": "<p>Written by Lucas Sinclair.\nMIT Licensed.\nContact at <a href=\"www.sinclair.bio\">www.sinclair.bio</a></p>\n"}, {"fullname": "fasta.common.add_dummy_scores", "modulename": "fasta.common", "qualname": "add_dummy_scores", "kind": "function", "doc": "<p>Add zero scores to all sequences.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">iterable</span>, </span><span class=\"param\"><span class=\"n\">score</span><span class=\"o\">=</span><span class=\"mi\">0</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "fasta.core", "modulename": "fasta.core", "kind": "module", "doc": "<p>Written by Lucas Sinclair.\nMIT Licensed.\nContact at <a href=\"www.sinclair.bio\">www.sinclair.bio</a></p>\n"}, {"fullname": "fasta.core.Dummy", "modulename": "fasta.core", "qualname": "Dummy", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "fasta.core.FASTA", "modulename": "fasta.core", "qualname": "FASTA", "kind": "class", "doc": "<p>A single FASTA file somewhere in the filesystem. You can read from it in\nseveral convenient ways. You can write to it in a automatically buffered\nway. There are several other things you can do with a FASTA file.</p>\n", "bases": "autopaths.file_path.FilePath"}, {"fullname": "fasta.core.FASTA.format", "modulename": "fasta.core", "qualname": "FASTA.format", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;fasta&#x27;"}, {"fullname": "fasta.core.FASTA.ext", "modulename": "fasta.core", "qualname": "FASTA.ext", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;fasta&#x27;"}, {"fullname": "fasta.core.FASTA.buffer_size", "modulename": "fasta.core", "qualname": "FASTA.buffer_size", "kind": "variable", "doc": "<p></p>\n", "default_value": "1000"}, {"fullname": "fasta.core.FASTA.gzipped", "modulename": "fasta.core", "qualname": "FASTA.gzipped", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "fasta.core.FASTA.first", "modulename": "fasta.core", "qualname": "FASTA.first", "kind": "variable", "doc": "<p>Just the first sequence.</p>\n"}, {"fullname": "fasta.core.FASTA.count", "modulename": "fasta.core", "qualname": "FASTA.count", "kind": "variable", "doc": "<p>Should probably check for file size changes instead of just\ncaching once TODO.</p>\n"}, {"fullname": "fasta.core.FASTA.lengths", "modulename": "fasta.core", "qualname": "FASTA.lengths", "kind": "variable", "doc": "<p>All the lengths, one by one, in a list.</p>\n"}, {"fullname": "fasta.core.FASTA.lengths_counter", "modulename": "fasta.core", "qualname": "FASTA.lengths_counter", "kind": "variable", "doc": "<p>A Counter() object with all the lengths inside.</p>\n"}, {"fullname": "fasta.core.FASTA.open", "modulename": "fasta.core", "qualname": "FASTA.open", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">mode</span><span class=\"o\">=</span><span class=\"s1\">&#39;r&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "fasta.core.FASTA.close", "modulename": "fasta.core", "qualname": "FASTA.close", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "fasta.core.FASTA.parse", "modulename": "fasta.core", "qualname": "FASTA.parse", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "fasta.core.FASTA.progress", "modulename": "fasta.core", "qualname": "FASTA.progress", "kind": "variable", "doc": "<p>Just like self.parse() but will display a progress bar.</p>\n"}, {"fullname": "fasta.core.FASTA.create", "modulename": "fasta.core", "qualname": "FASTA.create", "kind": "function", "doc": "<p>Create the file on the file system.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "fasta.core.FASTA.add", "modulename": "fasta.core", "qualname": "FASTA.add", "kind": "function", "doc": "<p>Use this method to add a bunch of SeqRecords at once.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">seqs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "fasta.core.FASTA.add_seq", "modulename": "fasta.core", "qualname": "FASTA.add_seq", "kind": "function", "doc": "<p>Use this method to add a SeqRecord object to this fasta.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">seq</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "fasta.core.FASTA.add_str", "modulename": "fasta.core", "qualname": "FASTA.add_str", "kind": "function", "doc": "<p>Use this method to add a sequence as a string to this fasta.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">seq</span>, </span><span class=\"param\"><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">description</span><span class=\"o\">=</span><span class=\"s1\">&#39;&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "fasta.core.FASTA.add_fasta", "modulename": "fasta.core", "qualname": "FASTA.add_fasta", "kind": "function", "doc": "<p>Use this method to add an other fasta to this fasta.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">path</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "fasta.core.FASTA.add_fastas", "modulename": "fasta.core", "qualname": "FASTA.add_fastas", "kind": "function", "doc": "<p>Use this method to add a bunch of fastas to this fasta.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">paths</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "fasta.core.FASTA.flush", "modulename": "fasta.core", "qualname": "FASTA.flush", "kind": "function", "doc": "<p>Empty the buffer.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "fasta.core.FASTA.write", "modulename": "fasta.core", "qualname": "FASTA.write", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">reads</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "fasta.core.FASTA.compress", "modulename": "fasta.core", "qualname": "FASTA.compress", "kind": "function", "doc": "<p>Turn this FASTA file into a gzipped FASTA file.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">new_path</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">remove_orig</span><span class=\"o\">=</span><span class=\"kc\">False</span>, </span><span class=\"param\"><span class=\"n\">method</span><span class=\"o\">=</span><span class=\"s1\">&#39;slow&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "fasta.core.FASTA.compress_slow", "modulename": "fasta.core", "qualname": "FASTA.compress_slow", "kind": "function", "doc": "<p>Do the compression internally via python.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">new_path</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "fasta.core.FASTA.compress_fast", "modulename": "fasta.core", "qualname": "FASTA.compress_fast", "kind": "function", "doc": "<p>Do the compression with an external shell command call.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">new_path</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "fasta.core.FASTA.ids", "modulename": "fasta.core", "qualname": "FASTA.ids", "kind": "variable", "doc": "<p>A frozen set of all unique IDs in the file.</p>\n"}, {"fullname": "fasta.core.FASTA.get_id", "modulename": "fasta.core", "qualname": "FASTA.get_id", "kind": "function", "doc": "<p>Extract one sequence from the file based on its ID.\nThis is highly ineffective.\nConsider using the SQLite API instead or memory map the file.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">id_num</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "fasta.core.FASTA.sequences", "modulename": "fasta.core", "qualname": "FASTA.sequences", "kind": "variable", "doc": "<p>Another way of easily retrieving sequences. Also highly ineffective.\nConsider using the SQLite API instead.</p>\n"}, {"fullname": "fasta.core.FASTA.sql", "modulename": "fasta.core", "qualname": "FASTA.sql", "kind": "variable", "doc": "<p>If you access this attribute, we will build an SQLite database\nout of the FASTA file and you will be able access everything in an\nindexed fashion, and use the blaze library via sql.frame</p>\n"}, {"fullname": "fasta.core.FASTA.length_by_id", "modulename": "fasta.core", "qualname": "FASTA.length_by_id", "kind": "variable", "doc": "<p>In some use cases you just need the sequence lengths in an indexed\nfashion. If you access this attribute, we will make a hash map in\nmemory.</p>\n"}, {"fullname": "fasta.core.FASTA.subsample", "modulename": "fasta.core", "qualname": "FASTA.subsample", "kind": "function", "doc": "<p>Pick a given number of sequences from the file pseudo-randomly.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">down_to</span><span class=\"o\">=</span><span class=\"mi\">1</span>, </span><span class=\"param\"><span class=\"n\">new_path</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"kc\">True</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "fasta.core.FASTA.rename_with_num", "modulename": "fasta.core", "qualname": "FASTA.rename_with_num", "kind": "function", "doc": "<p>Rename every sequence based on a prefix and a number.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">prefix</span><span class=\"o\">=</span><span class=\"s1\">&#39;&#39;</span>, </span><span class=\"param\"><span class=\"n\">new_path</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">remove_desc</span><span class=\"o\">=</span><span class=\"kc\">True</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "fasta.core.FASTA.rename_with_prefix", "modulename": "fasta.core", "qualname": "FASTA.rename_with_prefix", "kind": "function", "doc": "<p>Rename every sequence based on a prefix.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">prefix</span><span class=\"o\">=</span><span class=\"s1\">&#39;&#39;</span>, </span><span class=\"param\"><span class=\"n\">new_path</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">in_place</span><span class=\"o\">=</span><span class=\"kc\">True</span>, </span><span class=\"param\"><span class=\"n\">remove_desc</span><span class=\"o\">=</span><span class=\"kc\">True</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "fasta.core.FASTA.rename_sequences", "modulename": "fasta.core", "qualname": "FASTA.rename_sequences", "kind": "function", "doc": "<p>Will rename all sequences in the current fasta file using\nthe mapping dictionary also provided. In place or at a new path.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">mapping</span>, </span><span class=\"param\"><span class=\"n\">new_path</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">in_place</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "fasta.core.FASTA.extract_length", "modulename": "fasta.core", "qualname": "FASTA.extract_length", "kind": "function", "doc": "<p>Extract a certain length fraction and place them in a new file.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">lower_bound</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">upper_bound</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">new_path</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "fasta.core.FASTA.extract_sequences", "modulename": "fasta.core", "qualname": "FASTA.extract_sequences", "kind": "function", "doc": "<p>Will take all the sequences from the current file who's id appears in\nthe ids given and place them in a new file.\nIf no path is given, a new temporary path is created and returned.\nIf <code>in_place</code> is set to True, the original file is removed and replaced\nwith the result of the extraction.\nOptionally, the argument <code>ids</code> can be a function which has to take\none string as only input and return True for keeping the sequence and\nFalse for discarding the sequence.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">ids</span>, </span><span class=\"param\"><span class=\"n\">new_path</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">in_place</span><span class=\"o\">=</span><span class=\"kc\">False</span>, </span><span class=\"param\"><span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "fasta.core.FASTA.remove_trailing_stars", "modulename": "fasta.core", "qualname": "FASTA.remove_trailing_stars", "kind": "function", "doc": "<p>Remove the bad character that can be inserted by some programs at the\nend of sequences.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">new_path</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">in_place</span><span class=\"o\">=</span><span class=\"kc\">True</span>, </span><span class=\"param\"><span class=\"n\">check</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "fasta.core.FASTA.remove_duplicates", "modulename": "fasta.core", "qualname": "FASTA.remove_duplicates", "kind": "function", "doc": "<p>If several entries have the same ID in the FASTA file, keep only the\nfirst appearance and remove all the others.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">new_path</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">in_place</span><span class=\"o\">=</span><span class=\"kc\">True</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "fasta.core.FASTA.convert_U_to_T", "modulename": "fasta.core", "qualname": "FASTA.convert_U_to_T", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">new_path</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">in_place</span><span class=\"o\">=</span><span class=\"kc\">True</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "fasta.core.FASTA.align", "modulename": "fasta.core", "qualname": "FASTA.align", "kind": "function", "doc": "<p>We align the sequences in the fasta file with muscle.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">out_path</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "fasta.core.FASTA.template_align", "modulename": "fasta.core", "qualname": "FASTA.template_align", "kind": "function", "doc": "<p>We align the sequences in the fasta file with mothur and a template.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">ref_path</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "fasta.core.FASTA.index_bowtie", "modulename": "fasta.core", "qualname": "FASTA.index_bowtie", "kind": "function", "doc": "<p>Create an index on the fasta file compatible with bowtie2.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "fasta.core.FASTA.index_samtools", "modulename": "fasta.core", "qualname": "FASTA.index_samtools", "kind": "function", "doc": "<p>Create an index on the fasta file compatible with samtools.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "fasta.core.FASTA.graphs", "modulename": "fasta.core", "qualname": "FASTA.graphs", "kind": "variable", "doc": "<p>Sorry for the black magic. The result is an object whose attributes\nare all the graphs found in <code>./graphs.py</code> initialized with this\ninstance as only argument.</p>\n"}, {"fullname": "fasta.core.FASTA.parse_primers", "modulename": "fasta.core", "qualname": "FASTA.parse_primers", "kind": "function", "doc": "<p>Takes care of identifying primers inside every sequence.\nInstead of yielding Seq objects now we yield ReadWithPrimers objects.\nThese have extra properties that show the start and end positions\nof all primers found.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">primers</span>, </span><span class=\"param\"><span class=\"n\">mismatches</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "fasta.exceptions", "modulename": "fasta.exceptions", "kind": "module", "doc": "<p>Written by Lucas Sinclair.\nMIT Licensed.\nContact at <a href=\"www.sinclair.bio\">www.sinclair.bio</a></p>\n"}, {"fullname": "fasta.exceptions.ValidationError", "modulename": "fasta.exceptions", "qualname": "ValidationError", "kind": "class", "doc": "<p>An exception to be used when something fails to validate or is\nill-formatted.</p>\n", "bases": "builtins.Exception"}, {"fullname": "fasta.fastq", "modulename": "fasta.fastq", "kind": "module", "doc": "<p>Written by Lucas Sinclair.\nMIT Licensed.\nContact at <a href=\"www.sinclair.bio\">www.sinclair.bio</a></p>\n"}, {"fullname": "fasta.fastq.FASTQ", "modulename": "fasta.fastq", "qualname": "FASTQ", "kind": "class", "doc": "<p>A single FASTQ file somewhere in the filesystem.\nIt is very similar to a FASTA file object, except we have a few added\nmethods and properties for dealing with the quality scores.</p>\n", "bases": "fasta.core.FASTA"}, {"fullname": "fasta.fastq.FASTQ.ext", "modulename": "fasta.fastq", "qualname": "FASTQ.ext", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;fastq&#x27;"}, {"fullname": "fasta.fastq.FASTQ.format", "modulename": "fasta.fastq", "qualname": "FASTQ.format", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;fastq&#x27;"}, {"fullname": "fasta.fastq.FASTQ.count", "modulename": "fasta.fastq", "qualname": "FASTQ.count", "kind": "variable", "doc": "<p>Should probably check for file size changes instead of just\ncaching once TODO.</p>\n"}, {"fullname": "fasta.fastq.FASTQ.avg_quality", "modulename": "fasta.fastq", "qualname": "FASTQ.avg_quality", "kind": "variable", "doc": "<p>Returns a single float.\nQuite slow and inefficient computationally.\nThink of a better implementation?</p>\n"}, {"fullname": "fasta.fastq.FASTQ.to_fasta", "modulename": "fasta.fastq", "qualname": "FASTQ.to_fasta", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">path</span>, </span><span class=\"param\"><span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "fasta.fastq.FASTQ.to_qual", "modulename": "fasta.fastq", "qualname": "FASTQ.to_qual", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">path</span>, </span><span class=\"param\"><span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "fasta.fastq.FASTQ.validator", "modulename": "fasta.fastq", "qualname": "FASTQ.validator", "kind": "variable", "doc": "<p>Validate the format of this FASTQ.</p>\n"}, {"fullname": "fasta.fastq.FASTQ.fastqc", "modulename": "fasta.fastq", "qualname": "FASTQ.fastqc", "kind": "variable", "doc": "<p>Run the FastQC software on this FASTQ.</p>\n"}, {"fullname": "fasta.fastq.FASTQ.guess_phred_format", "modulename": "fasta.fastq", "qualname": "FASTQ.guess_phred_format", "kind": "function", "doc": "<p>Guess the PHRED score format. The gold standard is the first one, aka\nthe one called \"Sanger\". Sanger encoding is exactly equivalent to\nIllumina-1.8 encoding.\nIn other words, they finally gave up with their alternative standards.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "fasta.fastq.FASTQ.get_qual_range", "modulename": "fasta.fastq", "qualname": "FASTQ.get_qual_range", "kind": "function", "doc": "<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">get_qual_range</span><span class=\"p\">(</span><span class=\"s2\">&quot;DLXYXXRXWYYTPMLUUQWTXTRSXSWMDMTRNDNSMJFJFFRMV&quot;</span><span class=\"p\">)</span>\n<span class=\"go\">(68, 89)</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">phred_string</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "fasta.fastq.FASTQ.phred_13_to_18", "modulename": "fasta.fastq", "qualname": "FASTQ.phred_13_to_18", "kind": "function", "doc": "<p>Illumina-1.3 format conversion to Illumina-1.8 format via BioPython.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">new_path</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">in_place</span><span class=\"o\">=</span><span class=\"kc\">True</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "fasta.fastq.FASTQ.phred_13_to_18_sed", "modulename": "fasta.fastq", "qualname": "FASTQ.phred_13_to_18_sed", "kind": "function", "doc": "<p>Illumina-1.3 format conversion to Illumina-1.8 format via sed (faster).</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">new_path</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">in_place</span><span class=\"o\">=</span><span class=\"kc\">True</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "fasta.fastqc", "modulename": "fasta.fastqc", "kind": "module", "doc": "<p>Written by Lucas Sinclair.\nMIT Licensed.\nContact at <a href=\"www.sinclair.bio\">www.sinclair.bio</a></p>\n"}, {"fullname": "fasta.fastqc.FastQC", "modulename": "fasta.fastqc", "qualname": "FastQC", "kind": "class", "doc": "<p>Takes care of running the FastQC program on a given FASTQ file.\nSee <a href=\"http://www.bioinformatics.babraham.ac.uk/projects/fastqc/\">http://www.bioinformatics.babraham.ac.uk/projects/fastqc/</a>\nExpects version 0.11.9.</p>\n"}, {"fullname": "fasta.fastqc.FastQC.__init__", "modulename": "fasta.fastqc", "qualname": "FastQC.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">source</span>, </span><span class=\"param\"><span class=\"n\">dest</span><span class=\"o\">=</span><span class=\"kc\">None</span></span>)</span>"}, {"fullname": "fasta.fastqc.FastQC.source", "modulename": "fasta.fastqc", "qualname": "FastQC.source", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "fasta.fastqc.FastQC.dest", "modulename": "fasta.fastqc", "qualname": "FastQC.dest", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "fasta.fastqc.FastQC.apt_packages", "modulename": "fasta.fastqc", "qualname": "FastQC.apt_packages", "kind": "variable", "doc": "<p></p>\n", "default_value": "[&#x27;default-jre&#x27;]"}, {"fullname": "fasta.fastqc.FastQC.zip_url", "modulename": "fasta.fastqc", "qualname": "FastQC.zip_url", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;http://www.bioinformatics.babraham.ac.uk/projects/fastqc/fastqc_v0.11.9.zip&#x27;"}, {"fullname": "fasta.fastqc.FastQC.check_installed", "modulename": "fasta.fastqc", "qualname": "FastQC.check_installed", "kind": "function", "doc": "<p>Try to determine if the FastQC software is installed and\naccessible.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">cls</span>, </span><span class=\"param\"><span class=\"n\">exception</span><span class=\"o\">=</span><span class=\"kc\">True</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "fasta.fastqc.FastQC.install", "modulename": "fasta.fastqc", "qualname": "FastQC.install", "kind": "function", "doc": "<p>To automatically download and install the FastQC software on this\ncomputer and for the current user, type these commands in python:</p>\n\n<pre><code>&gt;&gt;&gt; from fasta.fastqc import FastQC\n&gt;&gt;&gt; FastQC.install()\n</code></pre>\n\n<p>If you are on macOS you can just type: \"brew install fastqc\"</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">cls</span>, </span><span class=\"param\"><span class=\"n\">prefix</span><span class=\"o\">=</span><span class=\"s1\">&#39;~/programs/FastQC/&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "fasta.fastqc.FastQC.results", "modulename": "fasta.fastqc", "qualname": "FastQC.results", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "fasta.fastqc.FastQCResults", "modulename": "fasta.fastqc", "qualname": "FastQCResults", "kind": "class", "doc": "<p>A directory with the results from FastQC.</p>\n", "bases": "autopaths.dir_path.DirectoryPath"}, {"fullname": "fasta.fastqc.FastQCResults.all_paths", "modulename": "fasta.fastqc", "qualname": "FastQCResults.all_paths", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;\\n                /Images/per_base_quality.png\\n                /Images/per_sequence_quality.png\\n                &#x27;"}, {"fullname": "fasta.fastqc.FastQCResults.per_base_qual", "modulename": "fasta.fastqc", "qualname": "FastQCResults.per_base_qual", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "fasta.fastqc.FastQCResults.per_seq_qual", "modulename": "fasta.fastqc", "qualname": "FastQCResults.per_seq_qual", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "fasta.graphs", "modulename": "fasta.graphs", "kind": "module", "doc": "<p>Written by Lucas Sinclair.\nMIT Licensed.\nContact at <a href=\"www.sinclair.bio\">www.sinclair.bio</a></p>\n"}, {"fullname": "fasta.graphs.LengthDist", "modulename": "fasta.graphs", "qualname": "LengthDist", "kind": "class", "doc": "<p>The length distribution of the sequences with a bar plot.</p>\n", "bases": "plumbing.graphs.Graph"}, {"fullname": "fasta.graphs.LengthDist.__init__", "modulename": "fasta.graphs", "qualname": "LengthDist.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">parent</span></span>)</span>"}, {"fullname": "fasta.graphs.LengthDist.short_name", "modulename": "fasta.graphs", "qualname": "LengthDist.short_name", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;length_dist&#x27;"}, {"fullname": "fasta.graphs.LengthDist.sep", "modulename": "fasta.graphs", "qualname": "LengthDist.sep", "kind": "variable", "doc": "<p></p>\n", "default_value": "(&#x27;x&#x27;, &#x27;y&#x27;)"}, {"fullname": "fasta.graphs.LengthDist.y_grid", "modulename": "fasta.graphs", "qualname": "LengthDist.y_grid", "kind": "variable", "doc": "<p></p>\n", "default_value": "True"}, {"fullname": "fasta.graphs.LengthDist.width", "modulename": "fasta.graphs", "qualname": "LengthDist.width", "kind": "variable", "doc": "<p></p>\n", "default_value": "10"}, {"fullname": "fasta.graphs.LengthDist.height", "modulename": "fasta.graphs", "qualname": "LengthDist.height", "kind": "variable", "doc": "<p></p>\n", "default_value": "6"}, {"fullname": "fasta.graphs.LengthDist.remove_frame", "modulename": "fasta.graphs", "qualname": "LengthDist.remove_frame", "kind": "variable", "doc": "<p></p>\n", "default_value": "True"}, {"fullname": "fasta.graphs.LengthDist.parent", "modulename": "fasta.graphs", "qualname": "LengthDist.parent", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "fasta.graphs.LengthDist.path", "modulename": "fasta.graphs", "qualname": "LengthDist.path", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "fasta.graphs.LengthDist.plot", "modulename": "fasta.graphs", "qualname": "LengthDist.plot", "kind": "function", "doc": "<p>An example plot function. You have to subclass this method.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "fasta.graphs.LengthHist", "modulename": "fasta.graphs", "qualname": "LengthHist", "kind": "class", "doc": "<p>The length distribution of the sequences with a histogram.</p>\n", "bases": "plumbing.graphs.Graph"}, {"fullname": "fasta.graphs.LengthHist.__init__", "modulename": "fasta.graphs", "qualname": "LengthHist.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">parent</span></span>)</span>"}, {"fullname": "fasta.graphs.LengthHist.short_name", "modulename": "fasta.graphs", "qualname": "LengthHist.short_name", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;length_hist&#x27;"}, {"fullname": "fasta.graphs.LengthHist.sep", "modulename": "fasta.graphs", "qualname": "LengthHist.sep", "kind": "variable", "doc": "<p></p>\n", "default_value": "(&#x27;x&#x27;, &#x27;y&#x27;)"}, {"fullname": "fasta.graphs.LengthHist.y_grid", "modulename": "fasta.graphs", "qualname": "LengthHist.y_grid", "kind": "variable", "doc": "<p></p>\n", "default_value": "True"}, {"fullname": "fasta.graphs.LengthHist.width", "modulename": "fasta.graphs", "qualname": "LengthHist.width", "kind": "variable", "doc": "<p></p>\n", "default_value": "10"}, {"fullname": "fasta.graphs.LengthHist.height", "modulename": "fasta.graphs", "qualname": "LengthHist.height", "kind": "variable", "doc": "<p></p>\n", "default_value": "6"}, {"fullname": "fasta.graphs.LengthHist.remove_frame", "modulename": "fasta.graphs", "qualname": "LengthHist.remove_frame", "kind": "variable", "doc": "<p></p>\n", "default_value": "True"}, {"fullname": "fasta.graphs.LengthHist.parent", "modulename": "fasta.graphs", "qualname": "LengthHist.parent", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "fasta.graphs.LengthHist.path", "modulename": "fasta.graphs", "qualname": "LengthHist.path", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "fasta.graphs.LengthHist.plot", "modulename": "fasta.graphs", "qualname": "LengthHist.plot", "kind": "function", "doc": "<p>An example plot function. You have to subclass this method.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">bins</span><span class=\"o\">=</span><span class=\"mi\">80</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "fasta.indexed", "modulename": "fasta.indexed", "kind": "module", "doc": "<p>Written by Lucas Sinclair.\nMIT Licensed.\nContact at <a href=\"www.sinclair.bio\">www.sinclair.bio</a></p>\n"}, {"fullname": "fasta.indexed.base_keys", "modulename": "fasta.indexed", "qualname": "base_keys", "kind": "variable", "doc": "<p></p>\n", "default_value": "(&#x27;id&#x27;, &#x27;description&#x27;, &#x27;seq&#x27;)"}, {"fullname": "fasta.indexed.DatabaseFASTA", "modulename": "fasta.indexed", "qualname": "DatabaseFASTA", "kind": "class", "doc": "<p>A wrapper for an SQLite3 database.</p>\n", "bases": "plumbing.databases.sqlite_database.SQLiteDatabase"}, {"fullname": "fasta.indexed.DatabaseFASTA.__init__", "modulename": "fasta.indexed", "qualname": "DatabaseFASTA.__init__", "kind": "function", "doc": "<p>A Path object is in fact a string.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">path</span>, </span><span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span>)</span>"}, {"fullname": "fasta.indexed.DatabaseFASTA.path", "modulename": "fasta.indexed", "qualname": "DatabaseFASTA.path", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "fasta.indexed.DatabaseFASTA.factory", "modulename": "fasta.indexed", "qualname": "DatabaseFASTA.factory", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "fasta.indexed.DatabaseFASTA.parse", "modulename": "fasta.indexed", "qualname": "DatabaseFASTA.parse", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "fasta.indexed.generate_values", "modulename": "fasta.indexed", "qualname": "generate_values", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">path</span>, </span><span class=\"param\"><span class=\"n\">progress</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "fasta.indexed.fasta_to_sql", "modulename": "fasta.indexed", "qualname": "fasta_to_sql", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">source</span>, </span><span class=\"param\"><span class=\"n\">dest</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "fasta.paired", "modulename": "fasta.paired", "kind": "module", "doc": "<p>Written by Lucas Sinclair.\nMIT Licensed.\nContact at <a href=\"www.sinclair.bio\">www.sinclair.bio</a></p>\n"}, {"fullname": "fasta.paired.PairedFASTA", "modulename": "fasta.paired", "qualname": "PairedFASTA", "kind": "class", "doc": "<p>Read and write FASTA file pairs without using too much RAM.</p>\n"}, {"fullname": "fasta.paired.PairedFASTA.__init__", "modulename": "fasta.paired", "qualname": "PairedFASTA.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">fwd</span>, </span><span class=\"param\"><span class=\"n\">rev</span>, </span><span class=\"param\"><span class=\"n\">parent</span><span class=\"o\">=</span><span class=\"kc\">None</span></span>)</span>"}, {"fullname": "fasta.paired.PairedFASTA.format", "modulename": "fasta.paired", "qualname": "PairedFASTA.format", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;fasta&#x27;"}, {"fullname": "fasta.paired.PairedFASTA.exists", "modulename": "fasta.paired", "qualname": "PairedFASTA.exists", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "fasta.paired.PairedFASTA.fwd", "modulename": "fasta.paired", "qualname": "PairedFASTA.fwd", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "fasta.paired.PairedFASTA.rev", "modulename": "fasta.paired", "qualname": "PairedFASTA.rev", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "fasta.paired.PairedFASTA.gzipped", "modulename": "fasta.paired", "qualname": "PairedFASTA.gzipped", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "fasta.paired.PairedFASTA.parent", "modulename": "fasta.paired", "qualname": "PairedFASTA.parent", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "fasta.paired.PairedFASTA.count", "modulename": "fasta.paired", "qualname": "PairedFASTA.count", "kind": "variable", "doc": "<p>Check both read counts are equal and return that number.</p>\n"}, {"fullname": "fasta.paired.PairedFASTA.open", "modulename": "fasta.paired", "qualname": "PairedFASTA.open", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "fasta.paired.PairedFASTA.parse", "modulename": "fasta.paired", "qualname": "PairedFASTA.parse", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "fasta.paired.PairedFASTA.close", "modulename": "fasta.paired", "qualname": "PairedFASTA.close", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "fasta.paired.PairedFASTA.create", "modulename": "fasta.paired", "qualname": "PairedFASTA.create", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "fasta.paired.PairedFASTA.add", "modulename": "fasta.paired", "qualname": "PairedFASTA.add", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">f</span>, </span><span class=\"param\"><span class=\"n\">r</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "fasta.paired.PairedFASTA.add_pair", "modulename": "fasta.paired", "qualname": "PairedFASTA.add_pair", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">pair</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "fasta.paired.PairedFASTA.remove", "modulename": "fasta.paired", "qualname": "PairedFASTA.remove", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "fasta.paired.PairedFASTA.progress", "modulename": "fasta.paired", "qualname": "PairedFASTA.progress", "kind": "variable", "doc": "<p>Just like self.parse but display a progress bar.</p>\n"}, {"fullname": "fasta.paired.PairedFASTA.subsample", "modulename": "fasta.paired", "qualname": "PairedFASTA.subsample", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">down_to</span>, </span><span class=\"param\"><span class=\"n\">dest_pair</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "fasta.paired.PairedFASTA.parse_primers", "modulename": "fasta.paired", "qualname": "PairedFASTA.parse_primers", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "fasta.paired.PairedFASTQ", "modulename": "fasta.paired", "qualname": "PairedFASTQ", "kind": "class", "doc": "<p>Read and write FASTQ file pairs without using too much RAM.</p>\n", "bases": "PairedFASTA"}, {"fullname": "fasta.paired.PairedFASTQ.__init__", "modulename": "fasta.paired", "qualname": "PairedFASTQ.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">fwd</span>, </span><span class=\"param\"><span class=\"n\">rev</span>, </span><span class=\"param\"><span class=\"n\">parent</span><span class=\"o\">=</span><span class=\"kc\">None</span></span>)</span>"}, {"fullname": "fasta.paired.PairedFASTQ.format", "modulename": "fasta.paired", "qualname": "PairedFASTQ.format", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;fastq&#x27;"}, {"fullname": "fasta.paired.PairedFASTQ.fwd", "modulename": "fasta.paired", "qualname": "PairedFASTQ.fwd", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "fasta.paired.PairedFASTQ.rev", "modulename": "fasta.paired", "qualname": "PairedFASTQ.rev", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "fasta.paired.PairedFASTQ.gzipped", "modulename": "fasta.paired", "qualname": "PairedFASTQ.gzipped", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "fasta.paired.PairedFASTQ.parent", "modulename": "fasta.paired", "qualname": "PairedFASTQ.parent", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "fasta.paired.PairedFASTQ.validate", "modulename": "fasta.paired", "qualname": "PairedFASTQ.validate", "kind": "function", "doc": "<p>Call fastQValidator on these files.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "fasta.primers", "modulename": "fasta.primers", "kind": "module", "doc": "<p>Written by Lucas Sinclair.\nMIT Licensed.\nContact at <a href=\"www.sinclair.bio\">www.sinclair.bio</a></p>\n"}, {"fullname": "fasta.primers.iupac", "modulename": "fasta.primers", "qualname": "iupac", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;A&#x27;: &#x27;A&#x27;, &#x27;G&#x27;: &#x27;G&#x27;, &#x27;T&#x27;: &#x27;T&#x27;, &#x27;C&#x27;: &#x27;C&#x27;, &#x27;M&#x27;: &#x27;AC&#x27;, &#x27;R&#x27;: &#x27;AG&#x27;, &#x27;W&#x27;: &#x27;AT&#x27;, &#x27;S&#x27;: &#x27;CG&#x27;, &#x27;Y&#x27;: &#x27;CT&#x27;, &#x27;K&#x27;: &#x27;GT&#x27;, &#x27;V&#x27;: &#x27;ACG&#x27;, &#x27;H&#x27;: &#x27;ACT&#x27;, &#x27;D&#x27;: &#x27;AGT&#x27;, &#x27;B&#x27;: &#x27;CGT&#x27;, &#x27;X&#x27;: &#x27;ACGT&#x27;, &#x27;N&#x27;: &#x27;ACGT&#x27;}"}, {"fullname": "fasta.primers.iupac_pattern", "modulename": "fasta.primers", "qualname": "iupac_pattern", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">seq</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "fasta.primers.TwoPrimers", "modulename": "fasta.primers", "qualname": "TwoPrimers", "kind": "class", "doc": "<p>A container for the two primers of a sample.\nHas methods for generating regexes to search for these primers.</p>\n"}, {"fullname": "fasta.primers.TwoPrimers.__init__", "modulename": "fasta.primers", "qualname": "TwoPrimers.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">fwd_str</span>, </span><span class=\"param\"><span class=\"n\">rev_str</span></span>)</span>"}, {"fullname": "fasta.primers.TwoPrimers.fwd_str", "modulename": "fasta.primers", "qualname": "TwoPrimers.fwd_str", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "fasta.primers.TwoPrimers.rev_str", "modulename": "fasta.primers", "qualname": "TwoPrimers.rev_str", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "fasta.primers.TwoPrimers.fwd_len", "modulename": "fasta.primers", "qualname": "TwoPrimers.fwd_len", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "fasta.primers.TwoPrimers.rev_len", "modulename": "fasta.primers", "qualname": "TwoPrimers.rev_len", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "fasta.primers.TwoPrimers.fwd_seq", "modulename": "fasta.primers", "qualname": "TwoPrimers.fwd_seq", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "fasta.primers.TwoPrimers.rev_seq", "modulename": "fasta.primers", "qualname": "TwoPrimers.rev_seq", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "fasta.primers.TwoPrimers.fwd_pat", "modulename": "fasta.primers", "qualname": "TwoPrimers.fwd_pat", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "fasta.primers.TwoPrimers.rev_pat", "modulename": "fasta.primers", "qualname": "TwoPrimers.rev_pat", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "fasta.primers.TwoPrimers.fwd_revcomp", "modulename": "fasta.primers", "qualname": "TwoPrimers.fwd_revcomp", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "fasta.primers.TwoPrimers.rev_revcomp", "modulename": "fasta.primers", "qualname": "TwoPrimers.rev_revcomp", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "fasta.primers.TwoPrimers.fwd_pat_revcomp", "modulename": "fasta.primers", "qualname": "TwoPrimers.fwd_pat_revcomp", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "fasta.primers.TwoPrimers.rev_pat_revcomp", "modulename": "fasta.primers", "qualname": "TwoPrimers.rev_pat_revcomp", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "fasta.primers.TwoPrimers.fwd_search", "modulename": "fasta.primers", "qualname": "TwoPrimers.fwd_search", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "fasta.primers.TwoPrimers.rev_search", "modulename": "fasta.primers", "qualname": "TwoPrimers.rev_search", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "fasta.primers.TwoPrimers.make_regex", "modulename": "fasta.primers", "qualname": "TwoPrimers.make_regex", "kind": "function", "doc": "<p>Complex search expression with mismatches this time.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">pat</span>, </span><span class=\"param\"><span class=\"n\">mismatches</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "fasta.primers.TwoPrimers.make_fwd_regex", "modulename": "fasta.primers", "qualname": "TwoPrimers.make_fwd_regex", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">mismatches</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "fasta.primers.TwoPrimers.make_rev_regex", "modulename": "fasta.primers", "qualname": "TwoPrimers.make_rev_regex", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">mismatches</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "fasta.primers.TwoPrimers.make_fwd_revcompl_regex", "modulename": "fasta.primers", "qualname": "TwoPrimers.make_fwd_revcompl_regex", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">mismatches</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "fasta.primers.TwoPrimers.make_rev_revcompl_regex", "modulename": "fasta.primers", "qualname": "TwoPrimers.make_rev_revcompl_regex", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">mismatches</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "fasta.primers.PrimersRegexes", "modulename": "fasta.primers", "qualname": "PrimersRegexes", "kind": "class", "doc": "<p>A container for the regular expression search patterns\nthat enable us to find primers inside a sequence.\nThese regexes depend on the number of mismatches authorized.</p>\n"}, {"fullname": "fasta.primers.PrimersRegexes.__init__", "modulename": "fasta.primers", "qualname": "PrimersRegexes.__init__", "kind": "function", "doc": "<p>We need to know the primers and the number of mismatches tolerated\nin the search.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">primers</span>, </span><span class=\"param\"><span class=\"n\">mismatches</span></span>)</span>"}, {"fullname": "fasta.primers.PrimersRegexes.primers", "modulename": "fasta.primers", "qualname": "PrimersRegexes.primers", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "fasta.primers.PrimersRegexes.mismatches", "modulename": "fasta.primers", "qualname": "PrimersRegexes.mismatches", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "fasta.primers.PrimersRegexes.fwd", "modulename": "fasta.primers", "qualname": "PrimersRegexes.fwd", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "fasta.primers.PrimersRegexes.rev", "modulename": "fasta.primers", "qualname": "PrimersRegexes.rev", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "fasta.primers.PrimersRegexes.fwd_rc", "modulename": "fasta.primers", "qualname": "PrimersRegexes.fwd_rc", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "fasta.primers.PrimersRegexes.rev_rc", "modulename": "fasta.primers", "qualname": "PrimersRegexes.rev_rc", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "fasta.primers.ReadWithPrimers", "modulename": "fasta.primers", "qualname": "ReadWithPrimers", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "fasta.primers.ReadWithPrimers.__init__", "modulename": "fasta.primers", "qualname": "ReadWithPrimers.__init__", "kind": "function", "doc": "<p>Uses regex patterns to search the given read.\nRecords the start and end positions of primers if they are found.\nBoth the forward and reverse primers are searched for.\nBoth the original sequences and their reverse complements are\nsearched for, in case the read is in the opposite direction.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">read</span>, </span><span class=\"param\"><span class=\"n\">regexes</span></span>)</span>"}, {"fullname": "fasta.primers.ReadWithPrimers.read", "modulename": "fasta.primers", "qualname": "ReadWithPrimers.read", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "fasta.primers.ReadWithPrimers.seq", "modulename": "fasta.primers", "qualname": "ReadWithPrimers.seq", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "fasta.primers.ReadWithPrimers.fwd", "modulename": "fasta.primers", "qualname": "ReadWithPrimers.fwd", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "fasta.primers.ReadWithPrimers.rev", "modulename": "fasta.primers", "qualname": "ReadWithPrimers.rev", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "fasta.primers.ReadWithPrimers.fwd_rc", "modulename": "fasta.primers", "qualname": "ReadWithPrimers.fwd_rc", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "fasta.primers.ReadWithPrimers.rev_rc", "modulename": "fasta.primers", "qualname": "ReadWithPrimers.rev_rc", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "fasta.primers.ReadWithPrimers.fwd_srt", "modulename": "fasta.primers", "qualname": "ReadWithPrimers.fwd_srt", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "fasta.primers.ReadWithPrimers.fwd_end", "modulename": "fasta.primers", "qualname": "ReadWithPrimers.fwd_end", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "fasta.primers.ReadWithPrimers.rev_srt", "modulename": "fasta.primers", "qualname": "ReadWithPrimers.rev_srt", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "fasta.primers.ReadWithPrimers.rev_end", "modulename": "fasta.primers", "qualname": "ReadWithPrimers.rev_end", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "fasta.primers.ReadWithPrimers.fwd_rc_srt", "modulename": "fasta.primers", "qualname": "ReadWithPrimers.fwd_rc_srt", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "fasta.primers.ReadWithPrimers.fwd_rc_end", "modulename": "fasta.primers", "qualname": "ReadWithPrimers.fwd_rc_end", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "fasta.primers.ReadWithPrimers.rev_rc_srt", "modulename": "fasta.primers", "qualname": "ReadWithPrimers.rev_rc_srt", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "fasta.primers.ReadWithPrimers.rev_rc_end", "modulename": "fasta.primers", "qualname": "ReadWithPrimers.rev_rc_end", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "fasta.primers.ReadWithPrimers.pretty_visualization", "modulename": "fasta.primers", "qualname": "ReadWithPrimers.pretty_visualization", "kind": "variable", "doc": "<p>This property is useful for debugging.\nIt will return a nicely formatted string showing the original read\nwith all primers found highlighted with bash color codes.</p>\n"}, {"fullname": "fasta.qual", "modulename": "fasta.qual", "kind": "module", "doc": "<p>Written by Lucas Sinclair.\nMIT Licensed.\nContact at <a href=\"www.sinclair.bio\">www.sinclair.bio</a></p>\n"}, {"fullname": "fasta.qual.QualFile", "modulename": "fasta.qual", "qualname": "QualFile", "kind": "class", "doc": "<p>A single QUAL file somewhere in the filesystem.</p>\n", "bases": "fasta.core.FASTA"}, {"fullname": "fasta.qual.QualFile.format", "modulename": "fasta.qual", "qualname": "QualFile.format", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;qual&#x27;"}, {"fullname": "fasta.qual.QualFile.ext", "modulename": "fasta.qual", "qualname": "QualFile.ext", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;qual&#x27;"}, {"fullname": "fasta.sizes", "modulename": "fasta.sizes", "kind": "module", "doc": "<p>Written by Lucas Sinclair.\nMIT Licensed.\nContact at <a href=\"www.sinclair.bio\">www.sinclair.bio</a></p>\n"}, {"fullname": "fasta.sizes.SizesFASTA", "modulename": "fasta.sizes", "qualname": "SizesFASTA", "kind": "class", "doc": "<p>A FASTA file with size annotation affecting the count.</p>\n", "bases": "fasta.core.FASTA"}, {"fullname": "fasta.sizes.SizesFASTA.count", "modulename": "fasta.sizes", "qualname": "SizesFASTA.count", "kind": "variable", "doc": "<p>Should probably check for file size changes instead of just\ncaching once TODO.</p>\n"}, {"fullname": "fasta.sizes.SizesFASTA.add_str", "modulename": "fasta.sizes", "qualname": "SizesFASTA.add_str", "kind": "function", "doc": "<p>Use this method to add a sequence as a string to this fasta.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">seq</span>, </span><span class=\"param\"><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">size</span><span class=\"o\">=</span><span class=\"mi\">1</span>, </span><span class=\"param\"><span class=\"n\">desc</span><span class=\"o\">=</span><span class=\"s1\">&#39;&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "fasta.splitable", "modulename": "fasta.splitable", "kind": "module", "doc": "<p>Written by Lucas Sinclair.\nMIT Licensed.\nContact at <a href=\"www.sinclair.bio\">www.sinclair.bio</a></p>\n"}, {"fullname": "fasta.splitable.SplitableFASTA", "modulename": "fasta.splitable", "qualname": "SplitableFASTA", "kind": "class", "doc": "<p>A FASTA file which you can split into chunks. Either you give the number\nof parts you want to generate, or you can give a target size in bytes for\neach part.</p>\n", "bases": "fasta.core.FASTA"}, {"fullname": "fasta.splitable.SplitableFASTA.__init__", "modulename": "fasta.splitable", "qualname": "SplitableFASTA.__init__", "kind": "function", "doc": "<p>A Path object is in fact a string.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">path</span>, </span><span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span>)</span>"}, {"fullname": "fasta.splitable.SplitableFASTA.path", "modulename": "fasta.splitable", "qualname": "SplitableFASTA.path", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "fasta.splitable.SplitableFASTA.make_name", "modulename": "fasta.splitable", "qualname": "SplitableFASTA.make_name", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "fasta.splitable.SplitableFASTA.parts", "modulename": "fasta.splitable", "qualname": "SplitableFASTA.parts", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "fasta.splitable.SplitableFASTA.status", "modulename": "fasta.splitable", "qualname": "SplitableFASTA.status", "kind": "variable", "doc": "<p>Has the splitting been done already?</p>\n"}, {"fullname": "fasta.splitable.SplitableFASTA.run", "modulename": "fasta.splitable", "qualname": "SplitableFASTA.run", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "fasta.validator", "modulename": "fasta.validator", "kind": "module", "doc": "<p>Written by Lucas Sinclair.\nMIT Licensed.\nContact at <a href=\"www.sinclair.bio\">www.sinclair.bio</a></p>\n"}, {"fullname": "fasta.validator.Validator", "modulename": "fasta.validator", "qualname": "Validator", "kind": "class", "doc": "<p>Determine if a FASTQ file is valid by calling\n<a href=\"https://github.com/statgen/fastQValidator\">https://github.com/statgen/fastQValidator</a>\non the file.\nDocumentation is at:\n<a href=\"https://genome.sph.umich.edu/wiki/FastQValidator\">https://genome.sph.umich.edu/wiki/FastQValidator</a></p>\n"}, {"fullname": "fasta.validator.Validator.__init__", "modulename": "fasta.validator", "qualname": "Validator.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">path</span></span>)</span>"}, {"fullname": "fasta.validator.Validator.path", "modulename": "fasta.validator", "qualname": "Validator.path", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "fasta.validator.Validator.apt_packages", "modulename": "fasta.validator", "qualname": "Validator.apt_packages", "kind": "variable", "doc": "<p></p>\n", "default_value": "[&#x27;g++&#x27;, &#x27;libssl-dev&#x27;, &#x27;zlib1g-dev&#x27;]"}, {"fullname": "fasta.validator.Validator.check_installed", "modulename": "fasta.validator", "qualname": "Validator.check_installed", "kind": "function", "doc": "<p>Try to determine if the fastQValidator software is installed and\naccessible on this machine.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">cls</span>, </span><span class=\"param\"><span class=\"n\">exception</span><span class=\"o\">=</span><span class=\"kc\">True</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "fasta.validator.Validator.install", "modulename": "fasta.validator", "qualname": "Validator.install", "kind": "function", "doc": "<p>To automatically download and install the fastQValidator software\non this computer and for the current user, type these commands in\npython:</p>\n\n<pre><code>&gt;&gt;&gt; from fasta.validator import Validator\n&gt;&gt;&gt; Validator.install()\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">cls</span>, </span><span class=\"param\"><span class=\"n\">prefix</span><span class=\"o\">=</span><span class=\"s1\">&#39;~/programs/fastQValidator/&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}];

    // mirrored in build-search-index.js (part 1)
    // Also split on html tags. this is a cheap heuristic, but good enough.
    elasticlunr.tokenizer.setSeperator(/[\s\-.;&_'"=,()]+|<[^>]*>/);

    let searchIndex;
    if (docs._isPrebuiltIndex) {
        console.info("using precompiled search index");
        searchIndex = elasticlunr.Index.load(docs);
    } else {
        console.time("building search index");
        // mirrored in build-search-index.js (part 2)
        searchIndex = elasticlunr(function () {
            this.pipeline.remove(elasticlunr.stemmer);
            this.pipeline.remove(elasticlunr.stopWordFilter);
            this.addField("qualname");
            this.addField("fullname");
            this.addField("annotation");
            this.addField("default_value");
            this.addField("signature");
            this.addField("bases");
            this.addField("doc");
            this.setRef("fullname");
        });
        for (let doc of docs) {
            searchIndex.addDoc(doc);
        }
        console.timeEnd("building search index");
    }

    return (term) => searchIndex.search(term, {
        fields: {
            qualname: {boost: 4},
            fullname: {boost: 2},
            annotation: {boost: 2},
            default_value: {boost: 2},
            signature: {boost: 2},
            bases: {boost: 2},
            doc: {boost: 1},
        },
        expand: true
    });
})();